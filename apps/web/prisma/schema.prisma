// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Post {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String
  channelId   Int?
  channel     Channel? @relation(fields: [channelId], references: [id])

  @@index([name])
}

model Channel {
  id                Int      @id @default(autoincrement())
  name              String
  thumbnailImageUrl String
  public            Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  members           User[]   @relation("ChannelMembers")
  posts             Post[]
  author            User     @relation(fields: [authorId], references: [id])
  authorId          String

  @@index([name])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String    @id @default(cuid())
  name             String?
  email            String?   @unique
  emailVerified    DateTime?
  image            String?
  accounts         Account[]
  sessions         Session[]
  posts            Post[]
  channels         Channel[] @relation("ChannelMembers")
  channelsCreated  Channel[]
  status           String?
  currentChannelId Int       @default(420)
  homeChannelId    Int       @default(420)
  sentFriendRequests   Friendship[] @relation("sent")
  receivedFriendRequests Friendship[] @relation("received")
  notifications         Notification[]
}

model Friendship {
  id          Int      @id @default(autoincrement())
  userAId     String   // One side of the friendship
  userBId     String   // The other side
  status      FriendshipStatus // e.g. PENDING, ACCEPTED, DECLINED, BLOCKED
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userA       User     @relation(name: "sent",fields: [userAId], references: [id])
  userB       User     @relation(name:"received",fields: [userBId], references: [id])

  @@index([userAId, userBId], name: "idx_userA_userB")
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  DECLINED
  BLOCKED
}

model Notification {
  id          Int      @id @default(autoincrement())
  userId      String   // Who the notification is for
  type        NotificationType // e.g. FRIEND_REQUEST
  content     String   // e.g. "John Doe sent you a friend request!"
  link        String?  // Any specific link related to this notification
  seen        Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id])
}

enum NotificationType {
  FRIEND_REQUEST
  // Add other types as necessary
}


model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}